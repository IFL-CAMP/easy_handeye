<launch>
    <arg name="robot_simulated"
         doc="If true, the demo.launch of ur5_moveit_config will be launched; otherwise, a connection to the real robot will be established"/>
    <arg unless="$(arg robot_simulated)" name="ur_robot_driver"
         doc="If true, the new ur_robot_driver will be used; otherwise, the old ur_modern_driver"/>
    <arg unless="$(arg robot_simulated)" name="robot_ip" default="192.168.0.21" doc="The IP address of the UR5 robot"/>

    <!-- start the Kinect -->

    <arg name="start_kinect" default="true" />
    <arg name="rgb_rect" default="1" />
    <arg name="depth_rect" default="0" />
    <arg name="ir_rect" default="0" />
    <arg name="point_cloud" default="0" />
    <arg name="rgb_point_cloud" default="0" />

    <!-- Start the K4A sensor driver -->
    <group if="$(arg start_kinect)" ns="k4a" >
        <include file="$(find azure_kinect_ros_driver)/launch/driver.launch" >
            <arg name="overwrite_robot_description" value="false" />
        </include>

        <!-- Spawn a nodelet manager -->
        <node pkg="nodelet" type="nodelet" name="manager" args="manager" output="screen">
            <param name="num_worker_threads" value="16" />
        </node>

        <!-- Spawn an image_proc/rectify nodelet to rectify the RGB image -->
        <node if="$(arg rgb_rect)"
              pkg="nodelet" type="nodelet" name="rectify_rgb"
              args="load image_proc/rectify manager --no-bond"
              respawn="true">
            <remap from="image_mono"  to="rgb/image_raw" />
            <remap from="image_rect"  to="rgb/image_rect_color" />
        </node>

        <!-- Spawn an image_proc/rectify nodelet to rectify the depth image -->
        <node if="$(arg depth_rect)"
              pkg="nodelet" type="nodelet" name="rectify_depth"
              args="load image_proc/rectify manager --no-bond"
              respawn="true">
            <remap from="image_mono"  to="depth/image_raw" />
            <remap from="image_rect"  to="depth/image_rect" />

            <param name="interpolation" value="0" />
        </node>

        <!-- Spawn an image_proc/rectify nodelet to rectify the IR image -->
        <node if="$(arg ir_rect)"
              pkg="nodelet" type="nodelet" name="rectify_ir"
              args="load image_proc/rectify manager --no-bond"
              respawn="true">
            <remap from="image_mono"  to="ir/image_raw" />
            <remap from="image_rect"  to="ir/image_rect" />
        </node>

        <group if="$(arg point_cloud)">
            <!-- Spawn a depth_image_proc/point_cloud_xyz nodelet to convert the
                depth image into a point cloud -->
            <node unless="$(arg rgb_point_cloud)"
                  pkg="nodelet" type="nodelet" name="point_cloud_xyz"
                  args="load depth_image_proc/point_cloud_xyz manager --no-bond"
                  respawn="true">
                <remap from="image_rect"  to="depth/image_rect" />
            </node>

            <group if="$(arg rgb_point_cloud)">
                <!-- Spawn a depth_image_proc/register nodelet to transform the
                    depth image into the color camera co-ordinate space -->
                <node pkg="nodelet" type="nodelet" name="depth_register"
                      args="load depth_image_proc/register manager --no-bond"
                      respawn="true">
                </node>

                <!-- Spawn a depth_image_proc/point_cloud_xyzrgb nodelet to convert the
                    depth_registered and color images image into a colorized point cloud -->
                <node pkg="nodelet" type="nodelet" name="point_cloud_xyzrgb"
                      args="load depth_image_proc/point_cloud_xyzrgb manager --no-bond"
                      respawn="true">
                </node>
            </group>
        </group>

    </group>

    <!-- start easy_aruco to track the example board -->
    <include if="$(arg start_kinect)" file="$(find easy_aruco)/launch/track_charuco_board.launch">
        <arg name="camera_namespace" value="/k4a/rgb"/>
        <arg name="dictionary" value="DICT_6X6_250"/>
        <arg name="square_number_x" value="7"/>
        <arg name="square_number_y" value="9"/>
        <arg name="square_size" value="0.024"/>
        <arg name="marker_size" value="0.016"/>
        <arg name="reference_frame" value="camera_base"/>
        <arg name="camera_frame" value="rgb_camera_link"/>
    </include>

    <!-- start the robot -->
    <group unless="$(arg robot_simulated)">
        <include if="$(arg ur_robot_driver)" file="$(find ur_robot_driver)/launch/ur5_bringup.launch">
            <arg name="limited" value="true"/>
            <arg name="robot_ip" value="$(arg robot_ip)"/>
        </include>
        <include unless="$(arg ur_robot_driver)" file="$(find ur_bringup)/launch/ur5_bringup.launch">
            <arg name="limited" value="true"/>
            <arg name="robot_ip" value="$(arg robot_ip)"/>
        </include>
        <include file="$(find ur5_moveit_config)/launch/ur5_moveit_planning_execution.launch">
            <arg name="limited" value="true"/>
        </include>
    </group>
    <include if="$(arg robot_simulated)" file="$(find ur5_moveit_config)/launch/demo.launch">
        <arg name="limited" value="true" />
    </include>
    <!-- we don't start RViz, we have our own -->

</launch>
